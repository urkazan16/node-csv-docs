{"data":{"page":{"html":"<h1 id=\"csv-stringify-options\"><a href=\"#csv-stringify-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Stringify options</h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden=\"true\" class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#available-options\">Available options</a></li>\n<li><a href=\"#option-columns\">Option columns</a></li>\n<li><a href=\"#option-formatters\">Option formatters</a></li>\n<li><a href=\"#option-header\">Option header</a></li>\n</ul>\n</div>\n<p>All options are optional. All the options from the <a href=\"https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\">Node.js Writable Stream API</a> and the <a href=\"https://nodejs.org/api/stream.html#stream_new_stream_readable_options\">Node.js Readable Stream API</a> are supported and passed as is.</p>\n<h2 id=\"available-options\"><a href=\"#available-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available options</h2>\n<ul>\n<li><code class=\"language-text\">columns</code> (array|object)<br>\nList of keys when records are provided in the of objects; work with records in the form of arrays based on index position; order matters; auto discovered in the first record when the user write objects, can refer to nested properties of the input JSON, see the \"header\" option on how to print columns names on the first line.</li>\n<li><code class=\"language-text\">delimiter</code><br>\nSet the field delimiter, one character only, defaults to a comma.   </li>\n<li><code class=\"language-text\">eof</code><br>\nAdd the value of \"options.rowDelimiter\" on the last line, default to true.   </li>\n<li><code class=\"language-text\">escape</code><br>\nDefaults to the escape read option.   </li>\n<li><code class=\"language-text\">header</code><br>\nDisplay the column names on the first line if the columns option is provided or discovered.   </li>\n<li><code class=\"language-text\">quote</code><br>\nThe quote characters, defaults to the <code class=\"language-text\">&quot;</code>, an empty quote value will preserve the original field.   </li>\n<li><code class=\"language-text\">quoted</code><br>\nBoolean, default to false, quote all the non-empty fields even if not required.</li>\n<li><code class=\"language-text\">quotedEmpty</code><br>\nBoolean, no default, quote empty fields?  If specified, overrides <code class=\"language-text\">quotedString</code> for empty strings.</li>\n<li><code class=\"language-text\">quotedString</code><br>\nBoolean, default to false, quote all fields of type string even if not required.</li>\n<li><code class=\"language-text\">rowDelimiter</code><br>\nString used to delimit record rows or a special value; special values are 'auto', 'unix', 'mac', 'windows', 'ascii', 'unicode'; defaults to 'auto' (discovered in source or 'unix' if no source is specified).   </li>\n<li>\n<p><code class=\"language-text\">formatters</code>\nKey-value object which defines custom formatters for certain data types.</p>\n<ul>\n<li><code class=\"language-text\">boolean</code>\nCustom formatter for boolean values.</li>\n<li><code class=\"language-text\">date</code>\nCustom formatter for date values.</li>\n<li><code class=\"language-text\">number</code>\nCustom formatter for number values.</li>\n<li><code class=\"language-text\">object</code>\nCustom formatter for generic object values.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"option-code-classlanguage-textcolumnscode\"><a href=\"#option-code-classlanguage-textcolumnscode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">columns</code></h2>\n<p>The associate value with the <code class=\"language-text\">column</code> option may come in different flavours: an int, an array or an object. Consider the <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/test/options.columns.coffee\">tests</a> as an exhaustive source of inspiration, examples and supported features.</p>\n<p>Once normalised, the final columns option is an array defining each column. Columns are themselves defined as an object with the properties:</p>\n<ul>\n<li><code class=\"language-text\">key</code> (string)<br>\nName of property present in the input records; required.</li>\n<li><code class=\"language-text\">header</code> (string)<br>\nValue to be printed in the first header line; to be used conjointly with the <code class=\"language-text\">header</code> option; default to <code class=\"language-text\">key</code>.</li>\n</ul>\n<p>Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The order definition matters. Reverse the order of the column option in the above example to <code class=\"language-text\">[ { key: &#39;b&#39; }, { key: &#39;a&#39; } ]</code> will have the consequence to reverse the order of the generated CSV as <code class=\"language-text\">2,1\\n</code>.</p>\n<p>This example could have been simplified by defining the column definitions as simple strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In case you wish to output the headers on the first line, you can used this option conjoingly with the <code class=\"language-text\">header</code> option. The column definition object can receive an optional <code class=\"language-text\">header</code> property which default to the <code class=\"language-text\">key</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">:</span> <span class=\"token string\">'col_a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">:</span> <span class=\"token string\">'col_b'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'col_a,col_b\\n1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This example could have been simplified by defining the column option as an object. This approach is not recommended as it implies relying on object property order which JavaScript doesn't guarantee.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'col_a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'col_b'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'col_a,col_b\\n1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"option-code-classlanguage-textformatterscode\"><a href=\"#option-code-classlanguage-textformatterscode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">formatters</code></h2>\n<p>This example is available with the command <code class=\"language-text\">node samples/options.formatters.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-stringify'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1971</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  formatters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"foo,1969-12-31T23:00:00.000Z\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"bar,1970-12-31T23:00:00.000Z\\n\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Run this example with the command <code class=\"language-text\">node samples/options.formatters.js</code>.</em></p>\n<h2 id=\"option-code-classlanguage-textheadercode\"><a href=\"#option-code-classlanguage-textheadercode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">header</code></h2>\n<p>In the <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/options.header.js\">header example</a>, the value is <code class=\"language-text\">true</code> and the header content is obtained from the keys present in the \"columns\" option.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-stringify'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXXX'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXX XXXX'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYYY'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYY YYYY'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"year,phone\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"XXXX,XXX XXXX\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"YYYY,YYY YYYY\\n\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Run this example with the command <code class=\"language-text\">node samples/options.header.js</code>.</em></p>","frontmatter":{"title":"Options","description":"Options relative to the csv-stringify package","keywords":["csv","stringify","options"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/stringify/options.md","slug":"/stringify/options/"}}},"pageContext":{}}
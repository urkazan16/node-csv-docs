{"data":{"page":{"html":"<h1 id=\"csv-parse-options\"><a href=\"#csv-parse-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Parse options</h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden=\"true\" class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#available-options\">Available options</a></li>\n<li><a href=\"#option-cast\">Option cast</a></li>\n<li><a href=\"#option-columns\">Option columns</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>All options are optional. The options from the <a href=\"https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\">Node.js Stream Writable</a> are also supported and passed as is. Only the \"objectMode\" is overwritten to always equal \"true\".</p>\n<h2 id=\"available-options\"><a href=\"#available-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available options</h2>\n<ul>\n<li><code class=\"language-text\">auto_parse</code> (boolean|function)<br>\nDeprecated, alias of \"cast\".</li>\n<li><code class=\"language-text\">auto_parse_date</code> (boolean|function)<br>\nDeprecated, alias of \"cast_date\".</li>\n<li><code class=\"language-text\">cast</code> (boolean|function)<br>\nIf true, the parser will attempt to convert input string to native types. If a function, receive the value as first argument, a context as second argument and return a new value. More information about the context properties is available below.</li>\n<li><code class=\"language-text\">cast_date</code> (boolean|function)<br>\nIf true, the parser will attempt to convert input string to dates. If a function, receive the value as argument and return a new value. It requires the \"auto_parse\" option. Be careful, it relies on <code class=\"language-text\">Date.parse</code>.</li>\n<li><code class=\"language-text\">columns</code> (array|boolean|function)<br>\nList of fields as an array, a user defined callback accepting the first line and returning the column names, or <code class=\"language-text\">true</code> if auto-discovered in the first CSV line. Defaults to <code class=\"language-text\">null</code>. Affects the result data set in the sense that records will be objects instead of arrays. A value \"false\" \"null\", or \"undefined\" inside the column array skips the column from the output.</li>\n<li><code class=\"language-text\">comment</code> (char)<br>\nTreat all the characters after this one as a comment. Defaults to <code class=\"language-text\">&#39;&#39;</code> (disabled).</li>\n<li><code class=\"language-text\">delimiter</code> (char)<br>\nSet the field delimiter. One character only. Defaults to <code class=\"language-text\">&quot;,&quot;</code> (comma).</li>\n<li><code class=\"language-text\">escape</code> (char)<br>\nSet the escape character. One character only. Defaults to double quote.</li>\n<li><code class=\"language-text\">from</code>, (number)<br>\nStart returning records from a particular line.</li>\n<li><code class=\"language-text\">ltrim</code> (boolean)<br>\nIf <code class=\"language-text\">true</code>, ignore whitespace immediately following the delimiter (i.e. left-trim all fields). Defaults to <code class=\"language-text\">false</code>. Does not remove whitespace in a quoted field.</li>\n<li><code class=\"language-text\">max_limit_on_data_read</code> (int)<br>\nMaximum numer of characters to be contained in the field and line buffers before an exception is raised. Used to guard against a wrong <code class=\"language-text\">delimiter</code> or <code class=\"language-text\">rowDelimiter</code>. Default to 128,000 characters.</li>\n<li><code class=\"language-text\">objname</code> (string)<br>\nName of header-record title to name objects by.</li>\n<li><code class=\"language-text\">quote</code> (char|boolean)<br>\nOptional character surrounding a field. One character only. Disabled if null, false or empty. Defaults to double quote.</li>\n<li><code class=\"language-text\">relax</code> (boolean)<br>\nPreserve quotes inside unquoted field (be warned, it doesn't make coffee).</li>\n<li><code class=\"language-text\">relax_column_count</code> (boolean)<br>\nDiscard inconsistent columns count. Default to <code class=\"language-text\">false</code>.</li>\n<li><code class=\"language-text\">raw</code> (boolean)<br>\nGenerate two properties <code class=\"language-text\">raw</code> and <code class=\"language-text\">row</code> where <code class=\"language-text\">raw</code> is the original CSV row content and <code class=\"language-text\">row</code> is the parsed array or object.</li>\n<li><code class=\"language-text\">rowDelimiter</code> (chars|array)<br>\nOne or multiple characters used to delimit records; defaults to auto discovery if not provided. Supported auto discovery methods are Linux (\"\\n\"), Apple (\"\\r\") and Windows (\"\\r\\n\") row delimiters.</li>\n<li><code class=\"language-text\">rtrim</code> (boolean)<br>\nIf <code class=\"language-text\">true</code>, ignore whitespace immediately preceding the delimiter (i.e. right-trim all fields). Defaults to <code class=\"language-text\">false</code>.  Does not remove whitespace in a quoted field.</li>\n<li><code class=\"language-text\">skip_empty_lines</code> (boolean)<br>\nDon't generate records for empty lines (line matching <code class=\"language-text\">/\\s*/</code>), defaults to <code class=\"language-text\">false</code>.</li>\n<li><code class=\"language-text\">skip_lines_with_error</code> (boolean)<br>\nSkip a line with error found inside and directly go process the next line.</li>\n<li><code class=\"language-text\">skip_lines_with_empty_values</code> (boolean)<br>\nDon't generate records for lines containing empty column values (column matching <code class=\"language-text\">/\\s*/</code>), defaults to <code class=\"language-text\">false</code>.</li>\n<li><code class=\"language-text\">to</code>, (number)<br>\nStop returning records after a particular line.</li>\n<li><code class=\"language-text\">trim</code> (boolean)<br>\nIf <code class=\"language-text\">true</code>, ignore whitespace immediately around the delimiter. Defaults to <code class=\"language-text\">false</code>. Does not remove whitespace in a quoted field.</li>\n</ul>\n<h2 id=\"option-code-classlanguage-textcastcode\"><a href=\"#option-code-classlanguage-textcastcode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">cast</code></h2>\n<p>The <code class=\"language-text\">cast</code> option accept a function which provides full control over a field.\nThe function is called with 2 arguments: the field value and a context object.\nThe context object accept the following properties: </p>\n<ul>\n<li><code class=\"language-text\">column</code><br>\nThe column name if the <code class=\"language-text\">columns</code> options is defined or the field position.</li>\n<li><code class=\"language-text\">count</code><br>\nThe number of records which have been fully parsed.</li>\n<li><code class=\"language-text\">index</code><br>\nThe field position.</li>\n<li><code class=\"language-text\">header</code><br>\nA boolean indicating if the records being parsed is the header.</li>\n<li><code class=\"language-text\">quoting</code><br>\nA boolean indicating if the field was surrounded by quotes.</li>\n<li><code class=\"language-text\">lines</code><br>\nThe number of lines which have been processed including the current line.</li>\n</ul>\n<p>The <a href=\"https://github.com/adaltas/node-csv-parse/blob/master/samples/options.cast.js\">cast example</a> uses the context to transform the first filed into a date and replace the second field with the injected context:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parse/lib/sync'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n  2000-01-01,date1\n  2050-11-27,date2\n`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  cast<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">T05:00:00.000Z`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> context\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  trim<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'2000-01-01T05:00:00.000Z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    quoting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> lines<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'2050-11-27T05:00:00.000Z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    quoting<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> lines<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"option-code-classlanguage-textcolumnscode\"><a href=\"#option-code-classlanguage-textcolumnscode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">columns</code></h2>\n<p>By default, the parser generates records in the form of arrays. The <a href=\"https://github.com/adaltas/node-csv-parse/blob/master/samples/options.columns.js\">columns example</a>\nillustrates how to generate records in the form of objects using the \"columns\" option.</p>\n<p>This example is available with the command <code class=\"language-text\">node samples/options.columns.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parse'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n  \"key_1\",\"key_2\"\n  \"value 1\",\"value 2\"\n`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  trim<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  skip_empty_lines<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n    records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      key_1<span class=\"token punctuation\">:</span> <span class=\"token string\">'value 1'</span><span class=\"token punctuation\">,</span>\n      key_2<span class=\"token punctuation\">:</span> <span class=\"token string\">'value 2'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Options","description":"Options relative to the csv-parse package","keywords":["csv","parse","options"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options.md","slug":"/parse/options/"}}},"pageContext":{}}
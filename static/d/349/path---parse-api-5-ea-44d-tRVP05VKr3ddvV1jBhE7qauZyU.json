{"data":{"page":{"html":"<h1 id=\"csv-parse-api\"><a href=\"#csv-parse-api\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Parse API</h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden=\"true\" class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li>\n<p><a href=\"#introduction\">Introduction</a></p>\n<ul>\n<li><a href=\"#stream-api\">Stream API</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#callback-api\">Callback API</a></p>\n<ul>\n<li><a href=\"#sync-api\">Sync API</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>There are multiple APIs available. Under the hood, they are all based on the same implementation. The stream API might not be the most pleasant API to use but is scalable. Use the callback style API or the sync API for simplicity, readability and conveniency if you are sure that your datasets fit in memory.</p>\n<h3 id=\"stream-api\"><a href=\"#stream-api\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream API</h3>\n<p>The main module exported by this package implements the native Node.js <a href=\"http://nodejs.org/api/stream.html#stream_class_stream_transform\">transform stream</a>. Transform streams implement both the Readable and Writable interfaces.</p>\n<p>This is the recommended approach if you need a maximum of power. It ensures scalability by treating your data as a stream from the source to the destination.</p>\n<p>The signature is <code class=\"language-text\">const stream = parse([options])</code>.</p>\n<p>In the <a href=\"https://github.com/adaltas/node-csv-parse/blob/master/samples/api.stream.js\">stream example</a>, CSV data is sent through the <code class=\"language-text\">write</code> function and the resulting data is obtained\nwithin the <code class=\"language-text\">readable</code> event by calling the <code class=\"language-text\">read</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parse'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// Create the parser</span>\n<span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  delimiter<span class=\"token punctuation\">:</span> <span class=\"token string\">':'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Write data to the stream</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root:x:0:0:root:/root:/bin/bash\\n\"</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someone:x:1022:1022::/home/someone:/bin/bash\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Close the readable stream</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Use the readable stream api</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> record\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>record <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Catch any error</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// When we are done, test that the parsed output matched what expected</span>\nparser<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n    output<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/bin/bash'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span> <span class=\"token string\">'someone'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1022'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1022'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/home/someone'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/bin/bash'</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"callback-api\"><a href=\"#callback-api\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback API</h2>\n<p>The signature is <code class=\"language-text\">parse(data, [options], callback)</code>.</p>\n<p>The <a href=\"https://github.com/adaltas/node-csv-parse/blob/master/samples/api.callback.js\">callback example</a> takes the CSV string in the first argument and a user callback in the second argument. The callback will received any error thrown by the CSV parser or an array of records object in the second argument. returns an array inside a user-provided\ncallback.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parse'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token string\">'#Welcome\\n\"1\",\"2\",\"3\",\"4\"\\n\"a\",\"b\",\"c\",\"d\"'</span>\n<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  comment<span class=\"token punctuation\">:</span> <span class=\"token string\">'#'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n    output<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"sync-api\"><a href=\"#sync-api\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sync API</h3>\n<p>It accepts a full data set as text and returns the full result set as an array\nor an object.</p>\n<p>This represent a regular direct synchronous call to a function: you pass records\nand it return a CSV text. Because of its simplicity, this is the recommended\napproach if you don't need scalability and if your dataset fit in memory.</p>\n<p>The module to require is <code class=\"language-text\">csv-parse/lib/sync</code> and the signature is <code class=\"language-text\">const records = parse(data, [options])</code>.</p>\n<p>The <a href=\"https://github.com/adaltas/node-csv-parse/blob/master/samples/module.sync.js\">synchronous example</a> illustrates how to use the alternative synchronous module. It is much easier to use at the expense of not being scalable.</p>\n<p>This example is available with the command <code class=\"language-text\">node samples/module.sync.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parse/lib/sync'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n\"key_1\",\"key_2\"\n\"value 1\",\"value 2\"\n`</span></span>\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  skip_empty_lines<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> key_1<span class=\"token punctuation\">:</span> <span class=\"token string\">'value 1'</span><span class=\"token punctuation\">,</span> key_2<span class=\"token punctuation\">:</span> <span class=\"token string\">'value 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"API","description":"CSV Parse - stream, callback and sync APIs","keywords":["intro","page"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/api.md","slug":"/parse/api/"}}},"pageContext":{}}
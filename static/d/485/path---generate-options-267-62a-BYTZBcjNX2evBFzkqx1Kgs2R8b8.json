{"data":{"page":{"html":"<h1 id=\"csv-generate-options\"><a href=\"#csv-generate-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Generate options</h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden=\"true\" class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#available-options\">Available options</a></li>\n<li><a href=\"#option-objectmode\">Option objectMode</a></li>\n</ul>\n</div>\n<p>All options are optional. All the options from the <a href=\"https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\">Node.js Stream Writable</a> are supported and passed as is.</p>\n<p>All options accept both the underscore and camel case forms. Thus, <code class=\"language-text\">row_delimiter</code> and <code class=\"language-text\">rowDelimiter</code> are equivalent. For the sake of clarity, we listed Node.js native options in the camel case form while library specific options are listed in the underscore form.</p>\n<h2 id=\"available-options\"><a href=\"#available-options\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available options</h2>\n<ul>\n<li><code class=\"language-text\">duration</code> (integer)<br>\nPeriod to run in milliseconds, default to 4 minutes.</li>\n<li><code class=\"language-text\">columns</code> (integer|array|function)<br>\nDefine the number of generated fields and the generation method. If columns is an integer, it corresponds to the number of fields. If it is an array, each element correspond to a field. If the field is a function, the function is expected to return a value, if a string, it call the registered function of the same name (eg <code class=\"language-text\">Generator.int</code> for the value \"int\"), current values are \"ascii\", \"int\" and \"bool\", more could be added by the user or on demand by opending a <a href=\"https://github.com/adaltas/node-csv-generate/issues/new\">pull request</a>. Default to 8 ascii columns.</li>\n<li><code class=\"language-text\">encoding</code> (string)<br>\nIf specified, then buffers will be decoded to strings using the specified encoding; see <a href=\"https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\">the documentation page</a> to see all the encodings supported by Buffer; default to <code class=\"language-text\">null</code>.</li>\n<li><code class=\"language-text\">max_word_length</code> (integer)<br>\nMaximum number of characters per word. Default to 16.</li>\n<li><code class=\"language-text\">end</code> (integer|date)<br>\nWhen to stop the generation; could be a numeric value and a date object; default is null.</li>\n<li><code class=\"language-text\">eof</code> (boolean|string)<br>\nOne or multiple characters to print at the end of the file; only apply when <code class=\"language-text\">objectMode</code> is disabled default to <code class=\"language-text\">false</code> or the value of <code class=\"language-text\">row_delimiter</code> if <code class=\"language-text\">true</code>.</li>\n<li><code class=\"language-text\">seed</code> (integer)<br>\nGenerate idempotent random characters if a number provided. The default value is <code class=\"language-text\">false</code> which disable the feature.</li>\n<li><code class=\"language-text\">length</code> (integer)<br>\nNumber of lines or records to generate. The default value is <code class=\"language-text\">-1</code> which is infinite.   </li>\n<li><code class=\"language-text\">objectMode</code> (boolean)<br>\nWhether this stream should behave as a stream of objects. Meaning that stream.read(n) returns a single value instead of a Buffer of size n. The default value is <code class=\"language-text\">false</code>.   </li>\n<li><code class=\"language-text\">highWaterMark</code> (integer)<br>\nThe maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. The default value is 16384 (16kb), or 16 for objectMode streams.</li>\n<li><code class=\"language-text\">row_delimiter</code> (string)<br>\nOne or multiple characters used to delimit records; only apply when <code class=\"language-text\">objectMode</code> is disabled; default to <code class=\"language-text\">\\n</code>, the Unix line ending.</li>\n</ul>\n<h2 id=\"option-code-classlanguage-textobjectmodecode\"><a href=\"#option-code-classlanguage-textobjectmodecode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">objectMode</code></h2>\n<p>By the default, the generator will generate a CSV dataset in the form of a string. It is however possible to generate objects but passing the <a href=\"https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\"><code class=\"language-text\">objectMode</code> option</a> native to the writable stream.</p>\n<p>In the <a href=\"https://github.com/adaltas/node-csv-generate/blob/master/samples/options.objectmode.stream.js\">stream example</a>, each record is returned by the <code class=\"language-text\">read</code> function in the form of an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-generate'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  seed<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  objectMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> record\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>record <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'OMH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ONKCHhJmjadoA'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the <a href=\"https://github.com/adaltas/node-csv-generate/blob/master/samples/options.objectmode.stream.js\">callback example</a>, the dataset is passed in the callback an array of array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-generate'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  seed<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  objectMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'OMH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ONKCHhJmjadoA'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GeACHiN'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Options","description":"Options relative to the csv-generate package","keywords":["csv","generate","options","duration","columns","seed","object","string"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/generate/options.md","slug":"/generate/options/"}}},"pageContext":{}}